
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { DocumentResult, ParagraphResult } from "@/types/gptzero";
import { getHumanReadableScore, getScoreColor, getGradientByScore } from "@/utils/gptzero";
import { Progress } from "@/components/ui/progress";
import { ArrowUpRight, Copy, AlertCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface ResultCardProps {
  result: DocumentResult;
  className?: string;
}

const ResultCard: React.FC<ResultCardProps> = ({ result, className }) => {
  const { completely_generated_prob, average_generated_prob, paragraphs } = result;
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success("Copied to clipboard");
  };

  // Determine verdict based on overall AI probability
  const getVerdict = () => {
    if (completely_generated_prob >= 0.7) {
      return {
        text: "This content was very likely generated by AI",
        color: "text-red-500 bg-red-50",
        icon: <AlertCircle className="h-4 w-4 mr-2" />
      };
    } else if (completely_generated_prob <= 0.3) {
      return {
        text: "This content was very likely written by a human",
        color: "text-green-600 bg-green-50",
        icon: <AlertCircle className="h-4 w-4 mr-2" />
      };
    } else {
      return {
        text: "This content has mixed signals of human and AI writing",
        color: "text-amber-500 bg-amber-50",
        icon: <AlertCircle className="h-4 w-4 mr-2" />
      };
    }
  };

  const verdict = getVerdict();

  return (
    <div className={cn("space-y-6 animate-slide-up", className)}>
      <Card className="glass overflow-hidden">
        <CardContent className="pt-6">
          <div className="flex flex-col md:flex-row gap-6 md:gap-12 items-start">
            <ScoreCard 
              title="Overall AI Probability"
              score={completely_generated_prob}
              description="The probability that the entire text was generated by AI."
            />
            <ScoreCard 
              title="Average AI Probability"
              score={average_generated_prob}
              description="The average AI probability across all paragraphs."
            />
          </div>
        </CardContent>
      </Card>

      {/* Verdict Alert */}
      <Alert className={cn("border-none", verdict.color)}>
        <AlertDescription className="flex items-center font-medium text-base">
          {verdict.icon}
          {verdict.text}
        </AlertDescription>
      </Alert>

      <div className="space-y-4">
        <h3 className="text-lg font-medium">Paragraph Analysis</h3>
        {paragraphs.map((paragraph, index) => (
          <Card key={index} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="p-4 space-y-2 relative">
                <div className="absolute top-4 right-4 flex gap-2">
                  <button
                    onClick={() => copyToClipboard(paragraph.text)}
                    className="p-1.5 rounded-full hover:bg-secondary transition-colors"
                    aria-label="Copy text"
                  >
                    <Copy className="h-4 w-4 text-muted-foreground" />
                  </button>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">Paragraph {index + 1}</span>
                  <div className="flex-1 h-[1px] bg-border"></div>
                  <span className={cn("text-sm font-medium", getScoreColor(paragraph.generated_prob))}>
                    {getHumanReadableScore(paragraph.generated_prob)}
                  </span>
                </div>
                <div className="flex items-center gap-2 mb-3">
                  <span className="text-xs text-muted-foreground">AI Probability:</span>
                  <Progress 
                    value={paragraph.generated_prob * 100} 
                    className={cn("h-2 w-24 bg-gradient-to-r", getGradientByScore(paragraph.generated_prob))}
                  />
                  <span className="text-xs font-medium">{Math.round(paragraph.generated_prob * 100)}%</span>
                </div>
                <p className="text-sm text-muted-foreground leading-relaxed whitespace-pre-line">
                  {paragraph.text}
                </p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

interface ScoreCardProps {
  title: string;
  score: number;
  description: string;
}

const ScoreCard: React.FC<ScoreCardProps> = ({ title, score, description }) => {
  const percentage = Math.round(score * 100);
  const scoreText = getHumanReadableScore(score);
  const scoreColor = getScoreColor(score);
  const gradientClass = getGradientByScore(score);
  
  return (
    <div className="flex-1 space-y-3">
      <div className="flex justify-between items-start">
        <h3 className="text-sm font-medium text-muted-foreground">{title}</h3>
        {score > 0.7 && (
          <div className="inline-flex items-center gap-1 text-amber-500 text-xs px-2 py-1 bg-amber-50 rounded-full">
            <AlertCircle className="h-3 w-3" />
            <span>High AI probability</span>
          </div>
        )}
      </div>
      
      <div className="flex items-end gap-2">
        <span className="text-4xl font-bold">{percentage}%</span>
        <span className={cn("text-lg pb-1", scoreColor)}>{scoreText}</span>
      </div>

      <Progress 
        value={percentage} 
        className={cn("h-2 bg-gradient-to-r", gradientClass)}
      />
      
      <p className="text-sm text-muted-foreground mt-2">{description}</p>
    </div>
  );
};

export default ResultCard;
